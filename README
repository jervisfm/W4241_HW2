Jervis Muindi
Numerical Algorithms and Complexity
Homework 2
February 2013

Introduction
============
This is a Java package that implements the Shaw-Traub Algorithm for finding all the (normalized) derivatives of a polynomial evaluated at a specifi point X.

For information on the Shaw-Traub Algorithm Refer to this Resource: 
Algorithms: Their Complexity and Efficiency.
2nd. Edition
Lydia Kronsjo
University of Birmingham
Page 37-38

How to Compile
==============

$ javac Main.java


How to Run
=============
java Main [file]

where [file] is a file contain a Polynomial specified in the format :

[Polynomial Order]
[Polynomial Coefficients]
[Value of X]


Test Run
=============
To Test my implementation, I picked two polynomials. 

1) x^3 + 3x^2 + 3x + 1
2) x^4 + 6x^3 + 3x^2 + 4x + 1 

I manually computed all the normalized derivatives of these polynomials evaluated at x=6 by using a Spreadsheet. You can insepct the test.xlsx file to see the spreadsheet.

From this computation, I got the expected derivatives to be:

Polynomial 1: x^3 + 3x^2 + 3x + 1 ; X = 6.
Derivative-Order	 Evaluated Value
	0					343
	1					147
	2					21
	3					1

Polynomial 2: x^4 + 6x^3 + 3x^2 + 4x + 1 ; X = 6.
Derivative Order 	Evaluated Value
	0					2725
	1					1552
	2					327
	3					30
	4					1


Running these same polynomials on my program I got the following output: 

Polynomial 1:
-------------
Given Polynomial: 1.0x^3 + 3.0x^2 + 3.0x^1 + 1.0x^0
Using X = 6.000
All *Normalized* Polynomial Derivatives of above polynomial are listed below:

0-th order (evaluated) polynomial derivative = 343.000000
1-th order (evaluated) polynomial derivative = 147.000000
2-th order (evaluated) polynomial derivative = 21.000000
3-th order (evaluated) polynomial derivative = 1.000000


Polynomial 2:
-------------
Given Polynomial: 1.0x^4 + 6.0x^3 + 3.0x^2 + 4.0x^1 + 1.0x^0
Using X = 6.000
All *Normalized* Polynomial Derivatives of above polynomial are listed below:

0-th order (evaluated) polynomial derivative = 2725.000000
1-th order (evaluated) polynomial derivative = 1552.000000
2-th order (evaluated) polynomial derivative = 327.000000
3-th order (evaluated) polynomial derivative = 30.000000
4-th order (evaluated) polynomial derivative = 1.000000

Result Discussion
=================
As it can be seen from the results above, I got the same result from running my program as I did for when I did the computation manually with a spreadsheet. 

If one wants the "actual" evaluated derivative, then they can obtain it as follows:

Let V be the normalized derivative.
Regualr Derivative = V * j!
where j = the order of the derivative


Error Checking
==============
A resonable attempt has been made to check and validate all inputs. Where appropriate, inputs are checked for validity and an appropriate exception is thrown.


Unit Tests
==========
A TDD methodology was followed in writing the package. You can use Eclipse's JUnit version 4 to execute and run the tests. 
